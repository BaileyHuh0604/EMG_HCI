import subprocess
import os
import threading
import dearpygui.dearpygui as dpg

# C++ 실행 파일 경로 설정
cpp_executable = r"C:\Users\허승혁\Downloads\WindowsProject1\Release\WindowsProject1.exe"

# 상태 저장 변수
connected = False
process = None

def run_cpp_program():
    global process
    try:
        # C++ 실행 파일이 있는 디렉토리를 얻습니다
        cpp_directory = os.path.dirname(cpp_executable)

        # subprocess를 사용하여 C++ 실행 파일 실행 (stdin, stdout, stderr 설정)
        process = subprocess.Popen([cpp_executable],
                                   stdin=subprocess.PIPE,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE,
                                   text=True,
                                   cwd=cpp_directory)

        # 비동기적으로 프로그램의 출력을 읽음
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                print(output.strip())
                # "Connected to device" 메시지를 감지
                if "Connected to device" in output:
                    update_status("Connected to device")
                    global connected
                    connected = True

        # 에러가 있는 경우 출력
        stderr = process.stderr.read()
        if stderr:
            print("Program Errors:\n", stderr)

    except Exception as e:
        print(f"Error: {str(e)}")

# 상태 업데이트 함수
def update_status(status_text):
    dpg.set_value("status_text", status_text)

# Start 버튼이 눌렸을 때 동작
def on_start_button():
    global process
    if connected and process:
        try:
            # C++ 프로그램에 'start' 명령을 stdin에 입력
            process.stdin.write("start\n")
            process.stdin.flush()  # 버퍼에 있는 내용을 강제로 플러시
            print("Start command sent")
        except Exception as e:
            print(f"Error sending start command: {str(e)}")
    else:
        print("Not connected yet")

# 백그라운드에서 C++ 프로그램을 실행하는 스레드
def background_process():
    thread = threading.Thread(target=run_cpp_program)
    thread.daemon = True
    thread.start()

# Dear PyGui GUI 구성
def create_gui():
    dpg.create_context()

    with dpg.window(label="C++ Program Controller", width=400, height=200):
        dpg.add_text("Status: ", tag="status_text")
        dpg.add_button(label="Start", callback=on_start_button)

    dpg.create_viewport(title='C++ GUI', width=400, height=200)
    dpg.setup_dearpygui()
    dpg.show_viewport()

    # C++ 프로그램 백그라운드 실행 시작
    background_process()

    dpg.start_dearpygui()
    dpg.destroy_context()

# GUI 실행
if __name__ == "__main__":
    create_gui()
